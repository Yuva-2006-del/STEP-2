public class GameController {
    // Instance variables
    private String controllerBrand;
    private String connectionType;
    private boolean hasVibration;
    private int batteryLevel;
    private double sensitivity;

    // Default constructor
    public GameController() {
        this.controllerBrand = "GenericPad";
        this.connectionType = "USB";
        this.hasVibration = true;
        this.batteryLevel = 100;
        this.sensitivity = 1.0;
    }

    // Full parameterized constructor with validation
    public GameController(String controllerBrand, String connectionType,
                          boolean hasVibration, int batteryLevel, double sensitivity) {
        this.controllerBrand = controllerBrand;
        this.connectionType = connectionType;
        this.hasVibration = hasVibration;

        // Validate batteryLevel (0-100)
        if (batteryLevel < 0) {
            this.batteryLevel = 0;
        } else if (batteryLevel > 100) {
            this.batteryLevel = 100;
        } else {
            this.batteryLevel = batteryLevel;
        }

        // Validate sensitivity (0.1 - 3.0)
        if (sensitivity < 0.1) {
            this.sensitivity = 0.1;
        } else if (sensitivity > 3.0) {
            this.sensitivity = 3.0;
        } else {
            this.sensitivity = sensitivity;
        }
    }

    // Convenience constructor with 2 parameters, rest default
    public GameController(String controllerBrand, String connectionType) {
        this(controllerBrand, connectionType, true, 100, 1.0);
    }

    // Methods to test functionality
    public void calibrateController() {
        System.out.println("Calibrating " + controllerBrand + " controller...");
    }

    public void displayConfiguration() {
        System.out.println("Controller Brand: " + controllerBrand);
        System.out.println("Connection Type: " + connectionType);
        System.out.println("Vibration Enabled: " + hasVibration);
        System.out.println("Battery Level: " + batteryLevel + "%");
        System.out.println("Sensitivity: " + sensitivity);
        System.out.println("---------------------------");
    }

    public void testVibration() {
        if (hasVibration) {
            System.out.println("*BUZZ* Vibration test successful!");
        } else {
            System.out.println("Vibration disabled on this controller.");
        }
    }

    public static void main(String[] args) {
        System.out.println("=== GAMING CONTROLLER SETUP ===");

        // Default controller
        GameController defaultController = new GameController();
        defaultController.displayConfiguration();
        defaultController.calibrateController();
        defaultController.testVibration();

        // Full parameterized controller
        GameController customController = new GameController("ProGamerX", "Bluetooth", false, 120, 3.5);
        customController.displayConfiguration();
        customController.calibrateController();
        customController.testVibration();

        // Convenience constructor controller
        GameController simpleController = new GameController("LitePad", "Wireless");
        simpleController.displayConfiguration();
        simpleController.calibrateController();
        simpleController.testVibration();

        // Comparing battery levels
        System.out.println("Comparing battery levels:");
        System.out.println("Default controller battery: " + defaultController.batteryLevel + "%");
        System.out.println("Custom controller battery (after validation): " + customController.batteryLevel + "%");
        System.out.println("Simple controller battery: " + simpleController.batteryLevel + "%");
    }
}
